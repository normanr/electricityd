#!/usr/bin/python

stateFile = '/var/lib/electricity/state'
mrtgServerAddress = '/var/run/electricity/socket'
pulseServerAddress = ('',20222)
powerFailScript = 'sudo /opt/etc/power/%s'

import fcntl, os, Queue, signal, serial, socket, SocketServer, sys, threading

pulseClients = []
pulseClientLock = threading.Lock()
credit = 0.0
pulseCounter = 0
powerfail = False

def serialMonitor():
    global pulseCounter, credit, powerfail
    serialPort = serial.Serial(0,1200,timeout=120)

    while True:
        char = serialPort.read()
        if char == '\xd0':
            if powerfail:
                powerfail = False
                os.system(powerFailScript % 'okay')
            pulseCounter += 1
            pulseClientLock.acquire()
            for client in pulseClients:
                client.put('.')
            pulseClientLock.release()
            if pulseCounter % 100 == 0:
                saveState(-0.1)
        elif char == '':
            if not powerfail:
                powerfail = True
                os.system(powerFailScript % 'fail')
            pulseClientLock.acquire()
            for client in pulseClients:
                client.put(' ')
            pulseClientLock.release()

def loadState():
    f = open(stateFile,'r')
    fcntl.flock(f,fcntl.LOCK_SH)
    try:
        d = f.readlines()
    finally:
        f.close()
    global pulseCounter, credit
    if len(d) > 0: credit = float(d[0])
    if len(d) > 1: pulseCounter = int(d[1])

def saveState(deltaCredit):
    f = open(stateFile,'r+')
    fcntl.flock(f,fcntl.LOCK_EX)
    try:
        d = f.readlines()
        global pulseCounter, credit
        if len(d) > 0: credit = float(d[0])
        credit += deltaCredit
        f.seek(0)
        f.truncate()
        f.writelines((str(credit) + '\n', str(pulseCounter) + '\n'))
    finally:
        f.close()

def cleanup(signum=None, frame=None):
    if os.path.exists(mrtgServerAddress):
        os.remove(mrtgServerAddress)
    saveState(0)
    sys.exit(0)

class mrtgSocketHandler(SocketServer.BaseRequestHandler):
    def handle(self): # on each client connect
        self.request.send(str(pulseCounter) + '\n')
        self.request.send(str(pulseCounter) + '\n')
        self.request.send('\n')
        self.request.send('\n')
        self.request.close()  

class pulseSocketHandler(SocketServer.BaseRequestHandler):
    def handle(self): # on each client connect
        self.request.setblocking(0)
        queue = Queue.Queue()
        pulseClientLock.acquire()
        pulseClients.append(queue)
        pulseClientLock.release()
        try:
            while 1:
                data = queue.get()
                self.request.send(data)
                queue.task_done()
                try:
                    self.request.recv(1024)
                except socket.error, msg:
                    pass
        except socket.error, msg:
            pass
        finally:
            pulseClientLock.acquire()
            pulseClients.remove(queue)
            pulseClientLock.release()
            self.request.close()  

loadState()
signal.signal(signal.SIGINT, cleanup)
signal.signal(signal.SIGTERM, cleanup)

mrtgServer = SocketServer.ThreadingUnixStreamServer(mrtgServerAddress, mrtgSocketHandler)
os.chmod(mrtgServerAddress, 0775)

mrtgThread = threading.Thread(None, mrtgServer.serve_forever)
mrtgThread.setDaemon(True)
mrtgThread.start()

class ThreadingTCP6Server(SocketServer.ThreadingTCPServer):
	address_family = socket.AF_INET6
	allow_reuse_address = True

pulseServer = ThreadingTCP6Server(pulseServerAddress, pulseSocketHandler)
pulseThread = threading.Thread(None, pulseServer.serve_forever)
pulseThread.setDaemon(True)
pulseThread.start()

serialMonitor()
