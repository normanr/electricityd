#!/usr/bin/python

mrtgServerAddress = '/var/run/electricity/socket'
#mrtgServerAddress = '/tmp/electricty_socket'
serialAddr = '/dev/ttyUSB0'
serialBaud = 57600
serialTimeout = 90
pulseServerAddress = ('',20222)
#pulseServerAddress = ('',20223)
powerFailScript = 'sudo /opt/etc/power/%s'
#powerFailScript = '/bin/echo %s'

import atexit
import os
import Queue
import re
import signal
import serial
import socket
import SocketServer
import sys
import threading
import time

clients = []
clients_lock = threading.Lock()
re_watts = re.compile('<watts>(\d+)</watts>')
pulseCounter = 0
joules = 0

def sendToClients(data):
    clients_lock.acquire()
    for client in clients:
        client.put(data)
    clients_lock.release()

def serialMonitor():
    global pulseCounter, joules
    serialPort = serial.Serial(serialAddr,serialBaud,timeout=serialTimeout)
    powerfail = False
    lastReadingAt = 0
    lastReadingValue = 0

    while True:
        line = serialPort.readline()
        if line:
            if powerfail:
                powerfail = False
                os.system(powerFailScript % 'okay')
            pulseCounter += 1
            match = re_watts.search(line)
            if match:
                timeNow = time.time()
                watts = int(match.group(1), 10)
                if lastReadingValue:
                    duration = timeNow - lastReadingAt
                    joules += lastReadingValue * duration
                lastReadingAt = timeNow
                lastReadingValue = watts
            sendToClients(line)
        else:
            if not powerfail:
                powerfail = True
                os.system(powerFailScript % 'fail')
            lastReadingValue = 0
            sendToClients('\r\n')

def cleanup(signum=None, frame=None):
    if os.path.exists(mrtgServerAddress):
        os.remove(mrtgServerAddress)
    sys.exit(0)

class mrtgSocketHandler(SocketServer.BaseRequestHandler):
    def handle(self): # on each client connect
        wattHours = str(int(joules / 3600))
        self.request.send(wattHours + '\n')
        self.request.send(wattHours + '\n')
        self.request.send('\n')
        self.request.send('\n')
        self.request.close()  

class clientSocketHandler(SocketServer.BaseRequestHandler):
    def handle(self): # on each client connect
        self.request.setblocking(0)
        queue = Queue.Queue()
        clients_lock.acquire()
        clients.append(queue)
        clients_lock.release()
        try:
            while 1:
                data = queue.get()
                self.request.send(data)
                queue.task_done()
                try:
                    self.request.recv(1024)
                except socket.error, msg:
                    pass
        except socket.error, msg:
            pass
        finally:
            clients_lock.acquire()
            clients.remove(queue)
            clients_lock.release()
            self.request.close()  

signal.signal(signal.SIGINT, cleanup)
signal.signal(signal.SIGTERM, cleanup)
atexit.register(cleanup)

mrtgServer = SocketServer.ThreadingUnixStreamServer(mrtgServerAddress, mrtgSocketHandler)
os.chmod(mrtgServerAddress, 0775)

mrtgThread = threading.Thread(None, mrtgServer.serve_forever)
mrtgThread.setDaemon(True)
mrtgThread.start()

class ThreadingTCP6Server(SocketServer.ThreadingTCPServer):
    address_family = socket.AF_INET6
    allow_reuse_address = True

pulseServer = ThreadingTCP6Server(pulseServerAddress, clientSocketHandler)
pulseThread = threading.Thread(None, pulseServer.serve_forever)
pulseThread.setDaemon(True)
pulseThread.start()

serialMonitor()
