#!/usr/bin/python3

import collections
import ast
import datetime
import gviz_api
import http.client
import http.server
import json
import operator
import os
import prctl
import queue
import re
import serial
import socket
import socketserver
import struct
import sys
import threading
import time
import traceback
import urllib.parse
import urllib.request

__version__ = '5.0'

def init(args):
    if len(args) < 1:
        print('missing config filename', file=sys.stderr)
        sys.exit(1)

    with open(args[0]) as f:
        global config
        config = ast.literal_eval(f.read())

    config_keys = ['xmlServerAddress', 'httpServerAddress', 'httpServerRoot', 'serialAddr',
                   'serialBaud', 'serialTimeout', 'powerFailScript',
                   'logFile', 'logTimeFormat', 'maxLogItems', 'services']
    for key in config_keys:
        assert key in config, '%r not found in config' % key

    if config['httpServerRoot']:
        os.chdir(config['httpServerRoot'])

    global log
    log = collections.deque([], config['maxLogItems'])

clients = []
clients_lock = threading.Lock()
log_lock = threading.Lock()
serial_lock = threading.Lock()

readings = {}
readings_lock = threading.Lock()
# key: duration (h/m/d), key: offset (numeric), value: 10 element list of float
history = collections.defaultdict(
    lambda: collections.defaultdict(
        lambda: [None] * 10)
    )
history_lock = threading.Lock()

def dumpLog(state):
    with log_lock, open(config['logFile'], 'a') as f:
        for ts, rd, line in log:
            print('%s %.1f %r' % (time.strftime(config['logTimeFormat'], time.localtime(ts)), rd, line), file=f)
        log.clear()
        print('%s %s' % (time.strftime(config['logTimeFormat']), state), file=f)

class serialMonitor(object):

    def __init__(self, config, parsers):
        self.config = config
        self.parsers = parsers
        self.serialPort = serial.serial_for_url(self.config['serialAddr'],
                                                baudrate=self.config['serialBaud'],
                                                timeout=self.config['serialTimeout'])
        self.timeLast = 0

    def sendToClients(self, data):
        with clients_lock:
            for client in clients:
                client.put(data)

    def watch(self):
        powerfail = False
        while True:
            timeStart = time.time()
            line = self.serialPort.readline().decode('utf8')
            if line:
                timeEnd = time.time()
                readDuration = timeEnd - timeStart
                with log_lock:
                    log.append((timeEnd, readDuration, line))
                if powerfail:
                    powerfail = False
                    dumpLog('okay')
                    os.system(self.config['powerFailScript'] % 'okay')
                for parser in self.parsers:
                    if parser.parseLine(line):
                        continue
                self.sendToClients(line)
            else:
                if not powerfail:
                    powerfail = True
                    dumpLog('fail')
                    os.system(self.config['powerFailScript'] % 'fail')
                with readings_lock:
                    readings['watts'] = 0
                self.sendToClients('\r\n')

class parser(object):

    def parseLine(self, line):
        raise NotImplementedError()

class currentcostEnviParser(parser):

    RE_WATTS = re.compile('<ch1><watts>0*(?P<watts>\d+)</watts></ch1>')
    RE_TEMP = re.compile('<tmpr> *(?P<temp>[\-\d.]+)</tmpr>')
    RE_HIST = re.compile('<hist>.*<\/hist>');
    RE_HIST_DATA = re.compile('<data><sensor>(?P<sensor>[^>]*)<\/sensor>(?P<data>.*?)<\/data>');
    RE_HIST_VALUE = re.compile('<(?P<unit>[hdm])(?P<duration>[0-9]{3})>(?P<value>[^<]*)');

    def __init__(self):
        readings.setdefault('lines', 0)
        readings.setdefault('last_cc128', 0)
        readings.setdefault('watts', 0)
        readings.setdefault('joules', 0)
        readings.setdefault('temp', 0)

    def parseLine(self, line):
        with readings_lock:
            readings['lines'] += 1
            match = self.RE_WATTS.search(line)
            if match:
                timeNow = time.time()
                if readings['watts']:
                    duration = timeNow - self.timeLast
                    readings['joules'] += readings['watts'] * duration
                self.timeLast = timeNow
                readings['last_cc128'] = timeNow
                readings['watts'] = int(match.group('watts'))
            match = self.RE_TEMP.search(line)
            if match:
                readings['temp'] = float(match.group('temp'))
        match = self.RE_HIST.search(line)
        if match:
            with history_lock:
                for data in self.RE_HIST_DATA.finditer(match.group(0)):
                    sensor = int(data.group('sensor'))
                    for value in self.RE_HIST_VALUE.finditer(data.group('data')):
                        unit = value.group('unit')
                        duration = int(value.group('duration'), 10)
                        value = float(value.group('value'))
                        history[unit][duration][sensor] = value

def hexint(x, width):
  i = int(x, 16)
  if i >= (1 << (width - 1)):
    i -= (1 << width)
  return i

class rainforestEagleParser(parser):

    RE_DEMAND = re.compile('<rainforest[^>]*>.*?<InstantaneousDemand>.*?'
        '<Demand>(?P<demand>(?:0[xX])?[\dA-Fa-f]+)</Demand>.*?'
        '<Multiplier>(?P<multiplier>(?:0[xX])?[\dA-Fa-f]+)</Multiplier>.*?'
        '<Divisor>(?P<divisor>(?:0[xX])?[\dA-Fa-f]+)</Divisor>.*?'
        '</InstantaneousDemand>.*?</rainforest>')

    def __init__(self):
        readings.setdefault('lines', 0)
        readings.setdefault('last_eagle', 0)
        readings.setdefault('watts', 0)
        readings.setdefault('joules', 0)
        readings.setdefault('joules_delivered', 0)
        readings.setdefault('joules_received', 0)

    def parseLine(self, line):
        with readings_lock:
            readings['lines'] += 1
            match = self.RE_DEMAND.search(line)
            if match:
                timeNow = time.time()
                if readings['watts']:
                    duration = timeNow - self.timeLast
                    joules = readings['watts'] * duration
                    readings['joules'] += joules
                    if joules < 0:
                      readings['joules_received'] -= joules
                    else:
                      readings['joules_delivered'] += joules
                self.timeLast = timeNow
                readings['last_eagle'] = timeNow
                kW = (hexint(match.group('demand'), 32) *
                      hexint(match.group('multiplier'), 32) /
                      hexint(match.group('divisor'), 32))
                readings['watts'] = int(kW * 1000)

class temperedParser(parser):

    RE_TEMPERED = re.compile('<tempered[^>]*>.*?'
        '<temperature>(?P<temp>[\-\d.]+)</temperature>.*?'
        '<relative_humidity>(?P<relative_humidity>[\-\d.]+)</relative_humidity>.*?'
        '</tempered>')

    def __init__(self):
        readings.setdefault('lines', 0)
        readings.setdefault('last_tempered', 0)
        readings.setdefault('temp', 0)
        readings.setdefault('relative_humidity', 0)

    def parseLine(self, line):
        with readings_lock:
            readings['lines'] += 1
            match = self.RE_TEMPERED.search(line)
            if match:
                readings['last_tempered'] = time.time()
                readings['temp'] = float(match.group('temp'))
                readings['relative_humidity'] = float(match.group('relative_humidity'))

class serviceThread(threading.Thread):

    def __init__(self, name, settings):
        required_settings = ['url', 'interval']
        for key in required_settings:
            assert key in settings, '%r not found in %r service settings' % (key, name)
        with readings_lock:
            assert settings['url'].format(**readings)
            if 'data' in settings:
                assert settings['data'].format(**readings)
        self.settings = settings

        threading.Thread.__init__(self, name=name)
        self.daemon = True
        self.start()

    def run(self):
        prctl.set_name('srv:i:%s' % self.name)
        self.waitForFirstReading()
        self.sendReadings()

    def waitForFirstReading(self):
        queue_ = queue.Queue()
        with clients_lock:
            clients.append(queue_)
        try:
            while True:
                queue_.get()
                queue_.task_done()
                with readings_lock:
                    if readings['watts']:
                        break
        finally:
            with clients_lock:
                clients.remove(queue_)

    def sendReadings(self):
        timeStart = time.time()
        while True:
            try:
                prctl.set_name('srv:s:%s' % self.name)
                self.sendSingleReading()
            except Exception as e:
                prctl.set_name('srv:e:%s' % self.name)
                sendDuration = time.time() - timeStart
                msg = '%.1f %s %s' % (sendDuration, self.name, traceback.format_exc())
                print(msg, file=sys.stderr)
                dumpLog(msg)

            while timeStart < time.time():
                timeStart += self.settings['interval']
            prctl.set_name('srv:w:%s' % self.name)
            time.sleep(max(timeStart - time.time(), 0))

    def sendSingleReading(self):
        with readings_lock:
            local_readings = readings.copy()
        url = self.settings['url'].format(**local_readings)
        kwargs = {
            'headers': {
                'User-Agent': 'Python-urllib/%s electricityd/%s' % (
                    urllib.request.__version__, __version__)
            }
        }
        if 'data' in self.settings:
            kwargs['data'] = self.settings['data'].format(**local_readings).encode('utf8')
        if 'headers' in self.settings:
            kwargs['headers'].update(self.settings['headers'])
        request = urllib.request.Request(url, **kwargs)
        timeout = self.settings.get('timeout', 10)
        timeStart = time.time()
        try:
            response = urllib.request.urlopen(request, timeout=timeout)
        except (http.client.HTTPException, socket.timeout, urllib.request.URLError) as e:
            sendDuration = time.time() - timeStart
            msg = '%.1f %s %s.%s %s' % (
                sendDuration, self.name,
                e.__class__.__module__, e.__class__.__name__, e)
            print(msg, file=sys.stderr)
            dumpLog(msg)

class xmlSocketHandler(socketserver.BaseRequestHandler):
    def handle(self): # on each client connect
        prctl.set_name('xml:%s' % self.request.getpeername()[0])
        self.request.setblocking(0)

        with log_lock:
            local_log = list(log)
        for ts, d, data in local_log:
            self.request.send(data.encode('utf8'))

        queue_ = queue.Queue()
        with clients_lock:
            clients.append(queue_)
        try:
            while True:
                data = queue_.get()
                self.request.send(data.encode('utf8'))
                queue_.task_done()
                try:
                    if self.request.recv(1024):
                        return
                except BlockingIOError:
                    pass
        except OSError:
            pass
        finally:
            with clients_lock:
                clients.remove(queue_)
            self.request.close()

class calculator(object):
    operations1 = {
        'int': int,
    }
    operations2 = {
        '<' : operator.lt,
        '>' : operator.gt,
        '<=' : operator.le,
        '>=' : operator.ge,
        '*' : operator.mul,
        '/' : operator.truediv,
        '+' : operator.add,
        '-' : operator.sub,
    }

    def __init__(self):
        self.response_code = 200
        self.operations1['assert'] = self.assert_value
        with readings_lock:
            self.readings = readings.copy()

    def assert_value(self, value):
        if not value:
            self.response_code = 500
        return value

    def calculate_value(self, ops):
        def next_value():
            op = next(ops)
            if op in self.readings:
                return self.readings[op]
            elif op == '(':
                return self.calculate_value(ops)
            elif (op in {'', ')'} or
                  op in self.operations1 or
                  op in self.operations2):
                return op
            elif op == 'now':
                return time.time()
            else:
                try:
                    if '.' in op:
                        op = float(op)
                    else:
                        op = int(op)
                except ValueError as e:
                    raise ValueError('Bad value %s' % op)
            return op

        has_value = False
        while True:
            try:
                op = next_value()
            except StopIteration:
                return value
            if op in self.operations1:
                value = self.operations1[op](next_value())
            elif op in self.operations2:
                rhs = next_value()
                if rhs == 'int':
                    value = int(value)
                else:
                    value = self.operations2[op](value, rhs)
            elif op == '':
                pass
            elif op == ')':
                return value
            elif not has_value:
                value = op
                has_value = True
            else:
                raise ValueError('Invalid op %s' % op)

    def calc(self, expression):
        if not expression:
            return expression
        value = self.calculate_value(iter(re.split(r'([^\w.]+)', expression)))
        return value

class httpRequestHandler(http.server.SimpleHTTPRequestHandler):
    wbufsize = -1  # http://lautaportti.wordpress.com/2011/04/01/basehttprequesthandler-wastes-tcp-packets/
    protocol_version = 'HTTP/1.1'

    def version_string(self):
        return 'electricityd/%s %s' % (
            __version__,
            http.server.SimpleHTTPRequestHandler.version_string(self))

    def do_GET(self): # on each client request
        try:
            url = urllib.parse.urlsplit(self.path)
            if config['httpServerRoot']:
                filename = self.translate_path(url.path)
                if os.path.isfile(filename) or url.path == '/':
                    http.server.SimpleHTTPRequestHandler.do_GET(self)
                    return
            if url.path == '/log':
                self.handleLogResponse(urllib.parse.parse_qs(url.query))
            elif url.path == '/hist.gviz':
                self.handleHistoryResponse(urllib.parse.parse_qs(url.query))
            else:
                self.handleVariableResponse(urllib.parse.unquote(url.path))
        except Exception as e:
            self.send_error(500)
            msg = '%s %s %s' % (self.client_address, self.path, traceback.format_exc())
            print(msg, file=sys.stderr)
            dumpLog(msg)

    def do_POST(self): # on each client request
        try:
            url = urllib.parse.urlsplit(self.path)
            if url.path == '/post':
                data_len = int(self.headers['Content-Length'])
                data = self.rfile.read(data_len)
                assert len(data) == data_len
                # for simplicity remove newlines & whitespace from post data
                data = re.sub(b'\n *', b'', data) + b'\n'
                # remove private data
                data = re.sub(b'<(DeviceMacId|MeterMacId|InstallCode|LinkKey|CoordMacId|ExtPanId)>[^<]*</(DeviceMacId|MeterMacId|InstallCode|LinkKey|CoordMacId|ExtPanId)>', b'', data)
                with serial_lock:
                    written = monitor.serialPort.write(data)
                assert written == len(data)
                self.send_response(204, 'No Content')
                self.send_header('Content-Length', 0)
                self.end_headers()
                return
            self.send_error(404)
        except Exception as e:
            self.send_error(500)
            msg = '%s %s %s' % (self.client_address, self.path, traceback.format_exc())
            print(msg, file=sys.stderr)
            dumpLog(msg)

    def list_directory(self, path):
        self.send_error(404, 'No permission to list directory')

    unit_map = {
        'h': ('hours', 1),
        'd': ('days', 1),
        'm': ('days', 30),
    }

    def handleHistoryResponse(self, query):
        try:
            unit = query.get('unit', '')[0]
        except IndexError:
            unit = ''

        try:
            tqx = query.get('tqx', '')[0]
        except IndexError:
            tqx = ''

        sensors = [int(x) for x in query.get('sensor', '')]

        convert = self.unit_map[unit]
        def mapTime(time):
            t = datetime.datetime.now()
            d = datetime.timedelta(**{convert[0]: time * convert[1]})
            return t - d

        def mapRow(row):
            return [row[s] for s in sensors]

        def mapTable(table):
            items = ([mapTime(k)] + mapRow(v) for k, v in table.items())
            return sorted(items)

        with history_lock:
            data = {unit:mapTable(history[unit]) for unit in self.unit_map}

        if unit not in data:
            self.send_error(400, 'Invalid request')
            return

        schema = [('', 'datetime')]
        for sensor in sensors:
            schema.append(('Sensor %d' % sensor, 'number'))

        table = gviz_api.DataTable(schema)
        table.LoadData(data[unit])

        result = table.ToResponse(tqx=tqx) + '\r\n'

        self.send_response(200, 'OK')
        self.send_header('Content-Type', 'application/json')
        self.send_header('Content-Length', len(result))
        self.end_headers()
        self.wfile.write(result.encode('utf8'))

    def handleLogResponse(self, query):
        try:
            ts = float(query.get('ts', '0')[0])
        except ValueError:
            ts = 0

        with log_lock:
            local_log = list(log)
        data = [x for x in local_log if x[0] > ts]

        if not data:
            queue_ = queue.Queue()
            with clients_lock:
                clients.append(queue_)
            try:
                queue_.get(True, 30)
                queue_.task_done()
            except queue.Empty:
                pass
            finally:
                with clients_lock:
                    clients.remove(queue_)

            with log_lock:
                local_log = list(log)
            data = [x for x in local_log if x[0] > ts]

        delay = 6
        if data:
            ts = data[-1][0]
            delay = ts - time.time() + 6

        result = json.dumps({
            'log': [x[2] for x in data],
            'ts': ts,
            'delay': delay,
        }) + '\n'

        self.send_response(200, 'OK')
        self.send_header('Content-Type', 'application/json')
        self.send_header('Content-Length', len(result))
        self.end_headers()
        self.wfile.write(result.encode('utf8'))

    def formatAsCacti(self, results):
        return 'text/plain', ' '.join(('%s:%s' % kv for kv in results))

    def formatAsCsv(self, results):
        return 'text/csv', ','.join((v for k,v in results))

    def formatAsJson(self, results):
        return 'application/json', json.dumps(collections.OrderedDict(results))

    def formatAsTxt(self, results):
        return 'text/plain', '\r\n'.join((v for k,v in results))

    def handleVariableResponse(self, path):
        if '.' not in path:
            self.send_error(400, 'Invalid request')
            return

        expressions, fmt = path.lstrip('/').rsplit('.', 1)
        formatter = getattr(self, 'formatAs%s' % fmt.title(), None)
        if not formatter:
            self.send_error(400, 'Invalid format %s' % fmt)
            return

        calc = calculator()
        if expressions == 'all':
            expressions = sorted(calc.readings.keys())
        else:
            expressions = expressions.split(',')

        results = []
        for expression in expressions:
            try:
                value = calc.calc(expression)
            except ValueError as e:
                self.send_error(400, str(e))
                return
            results.append(str(value))

        content_type, result = formatter(zip(expressions, results))
        result += '\r\n'

        self.send_response(calc.response_code)
        self.send_header('Content-Type', content_type)
        self.send_header('Content-Length', len(result))
        self.end_headers()
        self.wfile.write(result.encode('utf8'))

class IPv6Mixin:
    address_family = socket.AF_INET6
    allow_reuse_address = True

class BackgroundMixin(socketserver.ThreadingMixIn):
    daemon_threads = True

    def start(self, name):
        self.thread = threading.Thread(target=self.run, name=name)
        self.thread.daemon = True
        self.thread.start()

    def run(self):
        prctl.set_name(self.thread.name)
        self.serve_forever()

class BackgroundHTTP6Server(BackgroundMixin, IPv6Mixin, http.server.HTTPServer): pass
class BackgroundTCP6Server(BackgroundMixin, IPv6Mixin, socketserver.TCPServer): pass

def main(args):
    init(args)

    httpServer = BackgroundHTTP6Server(config['httpServerAddress'], httpRequestHandler)
    httpServer.start('httpserver')

    xmlServer = BackgroundTCP6Server(config['xmlServerAddress'], xmlSocketHandler)
    xmlServer.start('xmlserver')

    parsers = []
    for device in config['devices']:
        parsers.append({
          'cc128': currentcostEnviParser,
          'eagle': rainforestEagleParser,
          'tempered': temperedParser,
        }[device]())

    services = []
    for name, settings in config['services'].items():
        if settings.get('enabled', True):
            services.append(serviceThread(name, settings))

    global monitor
    monitor = serialMonitor(config, parsers)
    monitor.watch()

if __name__ == '__main__':
    main(sys.argv[1:])
